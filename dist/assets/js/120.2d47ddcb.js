(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{177:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"流式处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流式处理"}},[t._v("#")]),t._v(" 流式处理")]),t._v(" "),a("h2",{attrs:{id:"_1-流式处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-流式处理"}},[t._v("#")]),t._v(" 1.流式处理")]),t._v(" "),a("p",[t._v("Ignite流式处理可以以可扩展和容错的方式处理持续不断的数据流，将数据注入Ignite的速度可以非常高，每秒可以轻松超过上百万个事件。")]),t._v(" "),a("p",[a("strong",[t._v("工作方式")])]),t._v(" "),a("ol",[a("li",[t._v("客户端节点使用"),a("a",{attrs:{href:"#_2-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%A4%84%E7%90%86%E5%99%A8"}},[t._v("数据流处理器")]),t._v("将有限或者持续不断的数据流注入Ignite缓存；")]),t._v(" "),a("li",[t._v("数据自动在Ignite节点间分区，每个节点获得等量的数据；")]),t._v(" "),a("li",[t._v("流化数据可以直接在Ignite节点上以并置的方式批量处理；")]),t._v(" "),a("li",[t._v("客户端可以在流化数据上并发地执行SQL查询。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://files.readme.io/ea1452e-ignite-stream-query.png",alt:""}})]),t._v(" "),a("p",[a("strong",[t._v("数据流处理器")])]),t._v(" "),a("p",[t._v("数据流处理器通过"),a("code",[t._v("IDataStreamer")]),t._v("API定义，用于往Ignite缓存中注入大量持续不断的数据流。数据流处理器支持扩展和容错，并为所有注入Ignite的流式数据提供至少一次保证的语义。")]),t._v(" "),a("p",[a("strong",[t._v("数据查询")])]),t._v(" "),a("p",[t._v("可以使用完整的Ignite数据索引能力，再加上Ignite的SQL、文本和基于谓词的缓存查询，可以对流式数据进行查询。")]),t._v(" "),a("h2",{attrs:{id:"_2-数据流处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据流处理器"}},[t._v("#")]),t._v(" 2.数据流处理器")]),t._v(" "),a("p",[a("strong",[t._v("IDataStreamer")])]),t._v(" "),a("p",[t._v("将大量的数据流快速注入Ignite的主要抽象为"),a("code",[t._v("IDataStreamer")]),t._v("，其在内部会对数据进行批量化处理，并且会按照数据所属的节点对数据进行并置。")]),t._v(" "),a("p",[t._v("高加载速度是通过如下技术实现的：")]),t._v(" "),a("ul",[a("li",[t._v("映射到同一个节点的数据先批量进入一个缓冲区；")]),t._v(" "),a("li",[t._v("多个缓冲区可以共存；")]),t._v(" "),a("li",[t._v("为了避免运行时内存溢出，数据流处理器有一个可以并发处理的最大缓冲区数。")])]),t._v(" "),a("p",[t._v("要往数据流处理器中添加数据，需要调用"),a("code",[t._v("IDataStreamer.AddData(...)")]),t._v("方法。")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ldr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ignite"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token generic-method"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetDataStreamer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myStreamCache"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" EntryCount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ldr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Account")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[a("strong",[t._v("允许覆盖")])]),t._v(" "),a("p",[t._v("数据流处理器默认是不可以覆写已有的数据的，这意味着会跳过缓存中已有的数据。这是一个高效的模式，因为数据流处理器不用担心后台的数据版本。")]),t._v(" "),a("p",[t._v("如果预计数据在缓存中可能会存在，并且希望覆盖它，则需要将"),a("code",[t._v("IDataStreamer.AllowOverwrite")]),t._v("属性配置为"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("处理器、缓存存储和AllowOverwrite")]),t._v(" "),a("p",[a("code",[t._v("AllowOverwrite")]),t._v("属性如果为"),a("code",[t._v("false")]),t._v("（默认），即使"),a("code",[t._v("SkipStore")]),t._v("属性为"),a("code",[t._v("false")]),t._v("，也会忽略"),a("RouterLink",{attrs:{to:"/doc/net/Persistence.html#_2-第三方持久化"}},[t._v("持久化存储")]),t._v("。")],1),t._v(" "),a("p",[t._v("只有"),a("code",[t._v("AllowOverwrite")]),t._v("为"),a("code",[t._v("true")]),t._v("时，缓存存储才会被调用。")])]),t._v(" "),a("p",[a("strong",[t._v("StreamReceiver")])]),t._v(" "),a("p",[t._v("如果希望执行一些自定义的业务逻辑，而不仅仅是添加数据，这时可以利用"),a("code",[t._v("IStreamReceiver")]),t._v("API。")]),t._v(" "),a("p",[t._v("流接收器可以直接在将要缓存数据的节点上以并置方式对流数据做出反应，可以在将数据注入缓存之前修改数据或向其中添加任何自定义业务逻辑。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("注意"),a("code",[t._v("IStreamReceiver")]),t._v("不会自动将数据注入缓存，需要显式调用"),a("code",[t._v("ICache.Put(...)")]),t._v("等方法。")])]),t._v(" "),a("p",[a("strong",[t._v("StreamTransformer")])]),t._v(" "),a("p",[a("code",[t._v("StreamTransformer")]),t._v("是"),a("code",[t._v("IStreamReceiver")]),t._v("的简化实现，其可以根据前值更新缓存中的数据。更新是并置的，即更新发生在存储数据的节点上。")]),t._v(" "),a("p",[a("strong",[t._v("StreamVisitor")])]),t._v(" "),a("p",[a("code",[t._v("StreamVisitor")]),t._v("也是一种"),a("code",[t._v("IStreamReceiver")]),t._v("的简化实现，它会读取流中的每个键值对，注意其不会更新缓存。如果数据需要存储在缓存中，则应显式调用"),a("code",[t._v("ICache.Put(...)")]),t._v("等方法。")])])}),[],!1,null,null,null);s.default=n.exports}}]);