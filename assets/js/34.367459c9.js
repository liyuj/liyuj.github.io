(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{224:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"kafka-connect深度解读之jdbc源连接器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka-connect深度解读之jdbc源连接器"}},[t._v("#")]),t._v(" Kafka Connect深度解读之JDBC源连接器")]),t._v(" "),a("p",[t._v("在现实业务中，Kafka经常会遇到的一个集成场景就是，从数据库获取数据，因为关系数据库是一个非常丰富的事件源。数据库中的现有数据以及对该数据的任何更改都可以流式传输到Kafka主题中，在这里这些事件可用于驱动应用，也可以流式传输到其它数据存储（比如搜索引擎或者缓存）用于分析等。")]),t._v(" "),a("p",[t._v("实现这个需求有很多种做法，但是在本文中，会聚焦其中的一个解决方案，即Kafka Connect中的JDBC连接器，讲述如何进行配置，以及一些问题排查的技巧，至于更多的细节，请参见Kafka的文档。")]),t._v(" "),a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),a("p",[t._v("Kafka Connect中的JDBC连接器包含在Confluent Platform中，也可以与Confluent Hub分开安装。它可以作为源端从数据库提取数据到Kafka，也可以作为接收端从一个Kafka主题中将数据推送到数据库。几乎所有关系数据库都提供JDBC驱动，包括Oracle、Microsoft SQL Server、DB2、MySQL和Postgres。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.confluent.io/wp-content/uploads/JDBC-connector.png",alt:""}})]),t._v(" "),a("p",[t._v("下面将从最简单的Kafka Connect配置开始，然后进行构建。本文中的示例是从MySQL数据库中提取数据，该数据库有两个模式，每个模式都有几张表：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> SELECT table_schema, table_name FROM INFORMATION_SCHEMA.tables WHERE TABLE_SCHEMA != 'information_schema';\n+--------------+--------------+\n| TABLE_SCHEMA | TABLE_NAME   |\n+--------------+--------------+\n| demo         | accounts     |\n| demo         | customers    |\n| demo         | transactions |\n| security     | firewall     |\n| security     | log_events   |\n+--------------+--------------+\n")])])]),a("h2",{attrs:{id:"jdbc驱动"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdbc驱动"}},[t._v("#")]),t._v(" JDBC驱动")]),t._v(" "),a("p",[t._v("在进行配置之前，要确保Kafka Connect可以实际连接到数据库，即确保JDBC驱动可用。如果使用的是SQLite或Postgres，那么驱动已经包含在内，就可以跳过此步骤。对于所有其它数据库，需要将相关的JDBC驱动JAR文件放在和"),a("code",[t._v("kafka-connect-jdbc")]),t._v("JAR相同的文件夹中。此文件夹的标准位置为：")]),t._v(" "),a("ol",[a("li",[t._v("Confluent CLI：下载的Confluent Platform文件夹中的"),a("code",[t._v("share/java/kafka-connect-jdbc/")]),t._v("；")]),t._v(" "),a("li",[t._v("Docker，DEB / RPM安装："),a("code",[t._v("/usr/share/java/kafka-connect-jdbc/")]),t._v("，关于如何将JDBC驱动添加到Kafka Connect的Docker容器，请参阅"),a("a",{attrs:{href:"https://rmoff.net/2018/12/15/docker-tips-and-tricks-with-ksql-and-kafka/",target:"_self",rel:"noopener noreferrer"}},[t._v("此处")]),t._v("；")]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("kafka-connect-jdbc")]),t._v("JAR位于其它位置，则可以使用"),a("code",[t._v("plugin.path")]),t._v("指向包含它的文件夹，并确保JDBC驱动位于同一文件夹中。")])]),t._v(" "),a("p",[t._v("还可以在启动Kafka Connect时指定"),a("code",[t._v("CLASSPATH")]),t._v("，设置为可以找到JDBC驱动的位置。一定要将其设置为JAR本身，而不仅仅是包含它的文件夹，例如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("CLASSPATH=/u01/jdbc-drivers/mysql-connector-java-8.0.13.JAR ./bin/connect-distributed ./etc/kafka/connect-distributed.properties\n")])])]),a("p",[t._v("两个事情要注意一下：")]),t._v(" "),a("ol",[a("li",[t._v("如果"),a("code",[t._v("kafka-connect-jdbc")]),t._v("JAR位于其它位置，则Kafka Connect的"),a("code",[t._v("plugin.path")]),t._v("选项将无法直接指向JDBC驱动JAR文件 。根据文档，每个JDBC驱动JAR必须与"),a("code",[t._v("kafka-connect-jdbc")]),t._v("JAR位于同一目录；")]),t._v(" "),a("li",[t._v("如果正在运行多节点Kafka Connect集群，则需要在集群中的每个连接器工作节点上都正确安装JDBC驱动JAR。")])]),t._v(" "),a("p",[a("strong",[t._v("找不到合适的驱动")])]),t._v(" "),a("p",[t._v("与JDBC连接器有关的常见错误是"),a("code",[t._v("No suitable driver found")]),t._v("，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{"error_code":400,"message":"Connector configuration is invalid and contains the following 2 error(s):\\nInvalid value java.sql.SQLException: No suitable driver found for jdbc:mysql://X.X.X.X:3306/test_db?user=root&password=pwd for configuration Couldn\'t open connection to jdbc:mysql://X.X.X.X:3306/test_db?user=root&password=pwd\\nInvalid value java.sql.SQLException: No suitable driver found for jdbc:mysql://X.X.X.X:3306/test_db?user=root&password=admin for configuration Couldn\'t open connection to jdbc:mysql://X.X.X.X:3306/test_db?user=root&password=pwd\\nYou can also find the above list of errors at the endpoint `/{connectorType}/config/validate`"}\n')])])]),a("p",[t._v("这可能有2个原因：")]),t._v(" "),a("ol",[a("li",[t._v("未加载正确的JDBC驱动；")]),t._v(" "),a("li",[t._v("JDBC URL不正确。")])]),t._v(" "),a("p",[a("strong",[t._v("确认是否已加载JDBC驱动")])]),t._v(" "),a("p",[t._v("Kafka Connect会加载与"),a("code",[t._v("kafka-connect-jdbc")]),t._v("JAR文件在同一文件夹中的所有JDBC驱动，还有在"),a("code",[t._v("CLASSPATH")]),t._v("上找到的任何JDBC驱动。如果要验证一下，可以将连接器工作节点的"),a("a",{attrs:{href:"https://rmoff.github.io/post/kafka-connect-change-log-level-and-write-log-to-file/",target:"_self",rel:"noopener noreferrer"}},[t._v("日志级别调整")]),t._v("为"),a("code",[t._v("DEBUG")]),t._v("，然后会看到如下信息：")]),t._v(" "),a("p",[t._v("1."),a("code",[t._v("DEBUG Loading plugin urls")]),t._v("：包含"),a("code",[t._v("kafka-connect-jdbc-5.1.0.jar")]),t._v("（或者对应当前正在运行的版本号）的一组JAR文件：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DEBUG Loading plugin urls: [file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/audience-annotations-0.5.0.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/common-utils-5.1.0.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/jline-0.9.94.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/jtds-1.3.1.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/kafka-connect-jdbc-5.1.0.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/mysql-connector-java-8.0.13.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/netty-3.10.6.Final.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/postgresql-9.4-1206-jdbc41.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/slf4j-api-1.7.25.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/sqlite-jdbc-3.25.2.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/zkclient-0.10.jar, file:/Users/Robin/cp/confluent-5.1.0/share/java/kafka-connect-jdbc/zookeeper-3.4.13.jar] (org.apache.kafka.connect.runtime.isolation.DelegatingClassLoader)\n")])])]),a("p",[t._v("在这个JAR列表中，应该有JDBC驱动JAR。在上面的输出中，可以看到MySQL、Postgres和SQLite的JAR。如果期望的JDBC驱动JAR不在，可以将驱动放入"),a("code",[t._v("kafka-connect-jdbc")]),t._v("JAR所在的文件夹中。")]),t._v(" "),a("p",[t._v("2."),a("code",[t._v("INFO Added plugin 'io.confluent.connect.jdbc.JdbcSourceConnector'")]),t._v("：在此之后，在记录任何其它插件之前，可以看到JDBC驱动已注册：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INFO Added plugin 'io.confluent.connect.jdbc.JdbcSourceConnector' (org.apache.kafka.connect.runtime.isolation.DelegatingClassLoader)\nDEBUG Registered java.sql.Driver: jTDS 1.3.1 to java.sql.DriverManager (org.apache.kafka.connect.runtime.isolation.DelegatingClassLoader)\nDEBUG Registered java.sql.Driver: com.mysql.cj.jdbc.Driver@7bbbb6a8 to java.sql.DriverManager (org.apache.kafka.connect.runtime.isolation.DelegatingClassLoader)\nDEBUG Registered java.sql.Driver: org.postgresql.Driver@ea9e141 to java.sql.DriverManager (org.apache.kafka.connect.runtime.isolation.DelegatingClassLoader)\nDEBUG Registered java.sql.Driver: org.sqlite.JDBC@236134a1 to java.sql.DriverManager (org.apache.kafka.connect.runtime.isolation.DelegatingClassLoader)\n")])])]),a("p",[t._v("确认JDBC驱动包含在已注册的列表中。如果没有，那么就是安装不正确。")]),t._v(" "),a("p",[t._v("注意，虽然可能会在日志的其它地方看到驱动的"),a("code",[t._v("Registered java.sql.Driver")]),t._v("信息，但如果要确认其对于JDBC连接器可用，那么它必须"),a("code",[t._v("直接")]),t._v("出现在"),a("code",[t._v("INFO Added plugin 'io.confluent.connect.jdbc")]),t._v("消息的后面。")]),t._v(" "),a("p",[a("strong",[t._v("JDBC URL")])]),t._v(" "),a("p",[t._v("对于源数据库来说JDBC URL必须是正确的，如果搞错了，那么Kafka Connect即使驱动正确，也是不行。以下是一些常见的JDBC URL格式：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("数据库")]),t._v(" "),a("th",[t._v("下载地址")]),t._v(" "),a("th",[t._v("JDBC URL")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("IBM DB2")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://www-01.ibm.com/support/docview.wss?uid=swg21363866",target:"_self",rel:"noopener noreferrer"}},[t._v("下载")])]),t._v(" "),a("td",[a("code",[t._v("jdbc:db2://<host>:<port50000>/<database>")])])]),t._v(" "),a("tr",[a("td",[t._v("IBM Informix")]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("jdbc:informix-sqli://:/:informixserver=<debservername>")])])]),t._v(" "),a("tr",[a("td",[t._v("MS SQL")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/sql/connect/jdbc/microsoft-jdbc-driver-for-sql-server?view=sql-server-2017",target:"_self",rel:"noopener noreferrer"}},[t._v("下载")])]),t._v(" "),a("td",[a("code",[t._v("jdbc:sqlserver://<host>[:<port1433>];databaseName=<database>")])])]),t._v(" "),a("tr",[a("td",[t._v("MySQL")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://dev.mysql.com/downloads/connector/j/",target:"_self",rel:"noopener noreferrer"}},[t._v("下载")])]),t._v(" "),a("td",[a("code",[t._v("jdbc:mysql://<host>:<port3306>/<database>")])])]),t._v(" "),a("tr",[a("td",[t._v("Oracle")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://www.oracle.com/technetwork/database/application-development/jdbc/downloads/index.html",target:"_self",rel:"noopener noreferrer"}},[t._v("下载")])]),t._v(" "),a("td",[a("code",[t._v("jdbc:oracle:thin://<host>:<port>/<service> or jdbc:oracle:thin:<host>:<port>:<SID>")])])]),t._v(" "),a("tr",[a("td",[t._v("Postgres")]),t._v(" "),a("td",[t._v("Kafka Connect自带")]),t._v(" "),a("td",[a("code",[t._v("jdbc:postgresql://<host>:<port5432>/<database>")])])]),t._v(" "),a("tr",[a("td",[t._v("Amazon Redshift")]),t._v(" "),a("td",[a("a",{attrs:{href:"https://docs.aws.amazon.com/redshift/latest/mgmt/configure-jdbc-connection.html#download-jdbc-driver",target:"_self",rel:"noopener noreferrer"}},[t._v("下载")])]),t._v(" "),a("td",[a("code",[t._v("jdbc:redshift://<server>:<port5439>/<database>")])])]),t._v(" "),a("tr",[a("td",[t._v("Snowflake")]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("jdbc:snowflake://<account_name>.snowflakecomputing.com/?<connection_params>")])])])])]),t._v(" "),a("p",[t._v("注意，虽然JDBC URL通常允许嵌入身份验证信息，但这些内容将以"),a("strong",[t._v("明文形式")]),t._v("记录在Kafka Connect日志中。因此应该使用单独的"),a("code",[t._v("connection.user")]),t._v("和"),a("code",[t._v("connection.password")]),t._v("配置项，这样在记录时会被合理地处理。")]),t._v(" "),a("h2",{attrs:{id:"指定要提取的表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定要提取的表"}},[t._v("#")]),t._v(" 指定要提取的表")]),t._v(" "),a("p",[t._v("JDBC驱动安装完成之后，就可以配置Kafka Connect从数据库中提取数据了。下面是最小的配置，不过它不一定是最有用的，因为它是数据的批量导入，在本文后面会讨论如何进行增量加载。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_01",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-01-",\n                "mode":"bulk"\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("使用此配置，每个表（用户有权访问）将完全复制到Kafka，通过使用KSQL列出Kafka集群上的主题，我们可以看到：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ksql> LIST TOPICS;\n\n Kafka Topic            | Registered | Partitions | Partition Replicas | Consumers | ConsumerGroups\n----------------------------------------------------------------------------------------------------\n mysql-01-accounts      | false      | 1          | 1                  | 0         | 0\n mysql-01-customers     | false      | 1          | 1                  | 0         | 0\n mysql-01-firewall      | false      | 1          | 1                  | 0         | 0\n mysql-01-log_events    | false      | 1          | 1                  | 0         | 0\n mysql-01-transactions  | false      | 1          | 1                  | 0         | 0\n")])])]),a("p",[t._v("注意"),a("code",[t._v("mysql-01")]),t._v("前缀，表格内容的完整副本将每五秒刷新一次，可以通过修改"),a("code",[t._v("poll.interval.ms")]),t._v("进行调整，例如每小时刷新一次：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_02",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-02-",\n                "mode":"bulk",\n                "poll.interval.ms" : 3600000\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("找个主题确认一下，显示完整的数据，看看是不是自己想要的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ksql> PRINT \'mysql-02-accounts\' FROM BEGINNING;\nFormat:AVRO\n12/20/18 3:18:44 PM UTC, null, {"id": 1, "first_name": "Hamel", "last_name": "Bly", "username": "Hamel Bly", "company": "Erdman-Halvorson", "created_date": 17759}\n12/20/18 3:18:44 PM UTC, null, {"id": 2, "first_name": "Scottie", "last_name": "Geerdts", "username": "Scottie Geerdts", "company": "Mante Group", "created_date": 17692}\n12/20/18 3:18:44 PM UTC, null, {"id": 3, "first_name": "Giana", "last_name": "Bryce", "username": "Giana Bryce", "company": "Wiza Inc", "created_date": 17627}\n12/20/18 3:18:44 PM UTC, null, {"id": 4, "first_name": "Allen", "last_name": "Rengger", "username": "Allen Rengger", "company": "Terry, Jacobson and Daugherty", "created_date": 17746}\n12/20/18 3:18:44 PM UTC, null, {"id": 5, "first_name": "Reagen", "last_name": "Volkes", "username": "Reagen Volkes", "company": "Feeney and Sons", "created_date": 17798}\n…\n')])])]),a("p",[t._v("目前会展示所有可用的表，这可能不是实际的需求，可能只希望包含特定模式的表，这个可以使用"),a("code",[t._v("catalog.pattern/schema.pattern")]),t._v("（具体哪一个取决于数据库）配置项进行控制：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_03",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-03-",\n                "mode":"bulk",\n                "poll.interval.ms" : 3600000,\n                "catalog.pattern" : "demo"\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("这样就只会从"),a("code",[t._v("demo")]),t._v("模式中取得3张表：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ksql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LIST TOPICS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n Kafka Topic            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Registered "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Partitions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Partition Replicas "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Consumers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ConsumerGroups\n----------------------------------------------------------------------------------------------------\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n mysql-03-accounts      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n mysql-03-customers     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n mysql-03-transactions  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("…"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("也可以使用"),a("code",[t._v("table.whitelist")]),t._v("（白名单）或"),a("code",[t._v("table.blacklist")]),t._v("（黑名单）来控制连接器提取的表，下面的示例显式地列出了希望拉取到Kafka中的表清单：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_04",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-04-",\n                "mode":"bulk",\n                "poll.interval.ms" : 3600000,\n                "catalog.pattern" : "demo",\n                "table.whitelist" : "accounts"\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("这时就只有一个表从数据库流式传输到Kafka：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("ksql"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" LIST TOPICS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n Kafka Topic            "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Registered "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Partitions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Partition Replicas "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Consumers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" ConsumerGroups\n----------------------------------------------------------------------------------------------------\n mysql-04-accounts      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("                  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n")])])]),a("p",[t._v("因为只有一个表，下面的配置：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"catalog.pattern" : "demo",\n"table.whitelist" : "accounts",\n')])])]),a("p",[t._v("等同于：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"table.whitelist" : "demo.accounts",\n')])])]),a("p",[t._v("也可以在一个模式中指定多个表，比如：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"catalog.pattern" : "demo",\n"table.whitelist" : "accounts, customers",\n')])])]),a("p",[t._v("或者也可以跨越多个模式：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"table.whitelist" : "demo.accounts, security.firewall",\n')])])]),a("p",[t._v("还可以使用其它的表过滤选项，比如"),a("code",[t._v("table.types")]),t._v("可以选择表之外的对象，例如视图。")]),t._v(" "),a("p",[t._v("过滤表时要注意，因为如果最终没有对象匹配该模式（或者连接到数据库的已认证用户没有权限访问），那么连接器将报错：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INFO After filtering the tables are:  (io.confluent.connect.jdbc.source.TableMonitorThread)\n…\nERROR Failed to reconfigure connector's tasks, retrying after backoff: (org.apache.kafka.connect.runtime.distributed.DistributedHerder)\njava.lang.IllegalArgumentException: Number of groups must be positive\n")])])]),a("p",[t._v("在通过"),a("code",[t._v("table.whitelist/table.blacklist")]),t._v("进行过滤之前，可以将日志级别调整为"),a("code",[t._v("DEBUG")]),t._v("，查看用户可以访问的表清单：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('DEBUG Got the following tables: ["demo"."accounts", "demo"."customers"] (io.confluent.connect.jdbc.source.TableMonitorThread)\n')])])]),a("p",[t._v("然后，连接器会根据提供的白名单/黑名单过滤此列表，因此要确认指定的列表位于连接器可用的列表中，还要注意连接用户要有权限访问这些表，因此还要检查数据库端的"),a("code",[t._v("GRANT")]),t._v("语句。")]),t._v(" "),a("h2",{attrs:{id:"增量提取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增量提取"}},[t._v("#")]),t._v(" 增量提取")]),t._v(" "),a("p",[t._v("到目前为止，已经按计划将整张表都拉取到Kafka，这虽然对于转存数据非常有用，不过都是批量并且并不总是适合将源数据库集成到Kafka流系统中。")]),t._v(" "),a("p",[t._v("JDBC连接器还有一个"),a("a",{attrs:{href:"https://docs.confluent.io/5.1.0/connect/kafka-connect-jdbc/source-connector/source_config_options.html#mode",target:"_self",rel:"noopener noreferrer"}},[t._v("流式传输到Kafka")]),t._v("的选项，它只会传输上次拉取后的数据变更，具体可以基于自增列（例如自增主键）和/或时间戳（例如最后更新时间戳）来执行此操作。在模式设计中的常见做法是使用这些中的一个或两个，例如，事务表"),a("code",[t._v("ORDERS")]),t._v("可能有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ORDER_ID")]),t._v("：一个唯一键（可能是主键），每个新订单递增；")]),t._v(" "),a("li",[a("code",[t._v("UPDATE_TS")]),t._v("：每次数据变更时更新的时间戳列。")])]),t._v(" "),a("p",[t._v("可以使用"),a("code",[t._v("mode")]),t._v("参数配置该选项，比如使用"),a("code",[t._v("timestamp")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_08",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-08-",\n                "mode":"timestamp",\n                "table.whitelist" : "demo.accounts",\n                "timestamp.column.name": "UPDATE_TS",\n                "validate.non.null": false\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("下面会获取表的全部数据，外加源数据后续的更新和插入：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://www.confluent.io/wp-content/uploads/incremental_ingest.gif",alt:""}})]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("可以结合使用这些方法中的（时间戳/自增）或两者（时间戳+自增）；")]),t._v(" "),a("li",[t._v("要使用的时间戳和/或自增列必须在连接器处理的所有表上。如果不同的表具有不同名称的时间戳/自增列，则需要创建单独的连接器配置；")]),t._v(" "),a("li",[t._v("如果只使用自增列，则不会捕获对数据的更新，除非每次更新时自增列也会增加（在主键的情况下几乎不可能）；")]),t._v(" "),a("li",[t._v("某些表可能没有唯一的标识，或者有多个组合的列表示行的唯一标识（联合主键），不过JDBC连接器只支持单个标识列；")]),t._v(" "),a("li",[a("code",[t._v("时间戳+自增列")]),t._v("选项为识别新行和更新行提供了最大的覆盖范围；")]),t._v(" "),a("li",[t._v("许多RDBMS支持声明更新时间戳列的DDL，该列会自动更新。例如：\n"),a("ul",[a("li",[t._v("MySQL：")])])])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        …\n        UPDATE_TS "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Postgres：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        …\n        UPDATE_TS "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- Courtesy of https://techblog.covermymeds.com/databases/on-update-timestamps-mysql-vs-postgres/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FUNCTION")]),t._v(" update_updated_at_column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURNS")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trigger")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LANGUAGE")]),t._v(" plpgsql\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" $$\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v("\n    NEW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("update_ts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NOW")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RETURN")]),t._v(" NEW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("END")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n$$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRIGGER")]),t._v(" t1_updated_at_modtime BEFORE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR EACH ROW")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXECUTE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PROCEDURE")]),t._v(" update_updated_at_column"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Oracle：")])]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" foo "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        …\n        CREATE_TS "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CURRENT_TIMESTAMP")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPLACE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRIGGER")]),t._v(" TRG_foo_UPD\nBEFORE "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("OR")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" foo\nREFERENCING NEW "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AS")]),t._v(" NEW_ROW\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOR EACH ROW")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BEGIN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" SYSDATE\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" :NEW_ROW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("UPDATE_TS\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" DUAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("END")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n")])])]),a("h2",{attrs:{id:"基于查询的提取"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于查询的提取"}},[t._v("#")]),t._v(" 基于查询的提取")]),t._v(" "),a("p",[t._v("有时可能想从RDBMS中提取数据，但希望有比整个表更灵活的方式，原因可能包括：")]),t._v(" "),a("ul",[a("li",[t._v("一个有许多列的宽表，但是只希望有部分列被传输到Kafka主题上；")]),t._v(" "),a("li",[t._v("表中包含敏感信息，不希望这些信息传输到Kafka主题上（尽管也可以提取时在Kafka Connect中使用单消息转换进行处理）；")]),t._v(" "),a("li",[t._v("多个表之间存在依赖关系，因此在传输到Kafka之前，可能希望将其解析为一个单一的一致性视图。")])]),t._v(" "),a("p",[t._v("这可以使用JDBC连接器的"),a("code",[t._v("query")]),t._v("模式。在了解如何实现之前，需要注意以下几点：")]),t._v(" "),a("ul",[a("li",[t._v("谨防管道的“过早优化”，仅仅因为不需要源表中的某些列或行，而不是说在流式传输到Kafka时不应包含它们；")]),t._v(" "),a("li",[t._v("正如将在下面看到的，当涉及增量摄取时，"),a("code",[t._v("query")]),t._v("模式可能不那么灵活，因此从源中简单地删除列的另一种方法（无论是简单地减少数量，还是因为敏感信息）都是在连接器本身中使用"),a("code",[t._v("ReplaceField")]),t._v("单消息转换；")]),t._v(" "),a("li",[t._v("随着查询越来越复杂（例如解析关联），潜在的压力和对源数据库的影响会增加；")]),t._v(" "),a("li",[t._v("在RDBMS（作为源头）中关联数据是解决关联的一种方法，另一种方法是将源表流式传输到单独的Kafka主题，然后使用KSQL或Kafka Streams根据需求进行关联（过滤和标记数据也是如此），KSQL是在Kafka中对数据进行"),a("code",[t._v("后处理")]),t._v("的绝佳方式，使管道尽可能简单。")])]),t._v(" "),a("p",[t._v("下面将展示如何将"),a("code",[t._v("transactions")]),t._v("表，再加上"),a("code",[t._v("customers")]),t._v("表中的数据流式传输到Kafka：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_09",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-09",\n                "mode":"bulk",\n                "query":"SELECT t.txn_id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id;",\n                "poll.interval.ms" : 3600000\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("可能注意到已切换回"),a("code",[t._v("bulk")]),t._v("模式，可以使用主键或者时间戳其中一个增量选项，但要确保在SELECT子句中包含相应的主键/时间戳列（例如"),a("code",[t._v("txn_id")]),t._v("）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_10",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-10",\n                "mode":"incrementing",\n                "query":"SELECT txn_id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id",\n                "incrementing.column.name": "txn_id",\n                "validate.non.null": false\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("如果不包括该列（即使它存在于源表中），那么连接器会报错并显示"),a("code",[t._v("org.apache.kafka.connect.errors.DataException")]),t._v("异常（"),a("a",{attrs:{href:"https://github.com/confluentinc/kafka-connect-jdbc/issues/561",target:"_self",rel:"noopener noreferrer"}},[t._v("＃561")]),t._v("）或"),a("code",[t._v("java.lang.NullPointerException")]),t._v("异常（"),a("a",{attrs:{href:"https://github.com/confluentinc/kafka-connect-jdbc/issues/560",target:"_self",rel:"noopener noreferrer"}},[t._v("＃560")]),t._v("），这是因为连接器需要在返回的数据中获取值，以便可以存储相应偏移量的最新值。")]),t._v(" "),a("p",[t._v("如果使用"),a("code",[t._v("query")]),t._v("选项，除非使用"),a("code",[t._v("mode: bulk")]),t._v("（"),a("a",{attrs:{href:"https://github.com/confluentinc/kafka-connect-jdbc/issues/566",target:"_self",rel:"noopener noreferrer"}},[t._v("＃566")]),t._v("），否则无法指定自己的WHERE子句，也就是说，在查询中使用自己的谓词和使用Kafka进行增量提取之间是互斥的。")]),t._v(" "),a("h2",{attrs:{id:"一个还是多个连接器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个还是多个连接器"}},[t._v("#")]),t._v(" 一个还是多个连接器？")]),t._v(" "),a("p",[t._v("如果需要不同的参数设定，可以创建新的连接器，例如，可能希望有不同的参数：")]),t._v(" "),a("ul",[a("li",[t._v("包含自增主键和/或时间戳的列的名称；")]),t._v(" "),a("li",[t._v("轮询表的频率；")]),t._v(" "),a("li",[t._v("连接数据库的用户不同。")])]),t._v(" "),a("p",[t._v("简单来说，如果所有表参数都一样，则可以使用单个连接器。")]),t._v(" "),a("h2",{attrs:{id:"为什么没有数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么没有数据"}},[t._v("#")]),t._v(" 为什么没有数据？")]),t._v(" "),a("p",[t._v("创建连接器之后，可能在目标Kafka主题中看不到任何数据。下面会一步步进行诊断：")]),t._v(" "),a("p",[t._v("1.查询"),a("code",[t._v("/connectors")]),t._v("端点，可确认连接器是否创建成功：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s“http：// localhost：8083 / connectors”\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" “jdbc_source_mysql_10”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("应该看到连接器列表，如果没有，则需要按照之前的步骤进行创建，然后关注Kafka Connect返回的任何错误。")]),t._v(" "),a("p",[t._v("2.检查连接器及其任务的状态：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8083/connectors/jdbc_source_mysql_10/status"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jq "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc_source_mysql_10"')]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connector"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RUNNING"')]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"worker_id"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"kafka-connect:8083"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tasks"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"state"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"RUNNING"')]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"worker_id"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"kafka-connect:8083"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("正常应该看到所有的连接器和任务的"),a("code",[t._v("state")]),t._v("都是"),a("code",[t._v("RUNNING")]),t._v("，不过"),a("code",[t._v("RUNNING")]),t._v("不总是意味着正常。")]),t._v(" "),a("p",[t._v("3.如果连接器或任务的状态是"),a("code",[t._v("FAILED")]),t._v("，或者即使状态是"),a("code",[t._v("RUNNING")]),t._v("但是没有按照预期行为运行，那么可以转到Kafka Connect工作节点的输出（"),a("a",{attrs:{href:"https://www.confluent.io/blog/kafka-connect-deep-dive-converters-serialization-explained#finding-connect-worker-log",target:"_self",rel:"noopener noreferrer"}},[t._v("这里")]),t._v("有相关的说明），这里会显示是否存在任何实际的问题。以上面的连接器为例，其状态为"),a("code",[t._v("RUNNING")]),t._v("，但是连接器工作节点日志中实际上全是重复的错误：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ERROR Failed to run query for table TimestampIncrementingTableQuerier{table=null, query='SELECT t.id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id;', topicPrefix='mysql-10', incrementingColumn='t.id', timestampColumns=[]}: {} (io.confluent.connect.jdbc.source.JdbcSourceTask)\njava.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'WHERE `t.id` > -1 ORDER BY `t.id` ASC' at line 1\n at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:120)\n")])])]),a("p",[t._v("4.在这里，问题是什么并不明确，需要调出连接器的配置来检查指定的查询是否正确：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8083/connectors/jdbc_source_mysql_10/config"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jq "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connector.class"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"io.confluent.connect.jdbc.JdbcSourceConnector"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mode"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"incrementing"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"incrementing.column.name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t.id"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"topic.prefix"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mysql-10"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connection.password"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"asgard"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"validate.non.null"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connection.user"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connect_user"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"query"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"SELECT t.id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id;"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc_source_mysql_10"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connection.url"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc:mysql://mysql:3306/demo"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("5.在MySQL中运行此查询发现能正常执行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> SELECT t.id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id;\n+------+-------------+--------+----------+----------------------+------------+-----------+----------------------------+--------+------------------------------------------------------+\n| id   | customer_id | amount | currency | txn_timestamp        | first_name | last_name | email                      | gender | comments                                             |\n+------+-------------+--------+----------+----------------------+------------+-----------+----------------------------+--------+------------------------------------------------------+\n|    1 |           5 | -72.97 | RUB      | 2018-12-12T13:58:37Z | Modestia   | Coltart   | mcoltart4@scribd.com       | Female | Reverse-engineered non-volatile success\n")])])]),a("p",[t._v("6.所以肯定是Kafka Connect在执行时做了什么。鉴于错误消息引用"),a("code",[t._v("t.id")]),t._v("，这是在"),a("code",[t._v("incrementing.column.name")]),t._v("参数中指定的，可能问题与此有关。通过将Kafka Connect的日志级别调整为"),a("code",[t._v("DEBUG")]),t._v("，可以看到执行的完整SQL语句：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DEBUG TimestampIncrementingTableQuerier{table=null, query='SELECT t.id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id;', topicPrefix='mysql-10', incrementingColumn='t.id', timestampColumns=[]} prepared SQL query: SELECT t.id, t.customer_id, t.amount, t.currency, t.txn_timestamp, c.first_name, c.last_name, c.email, c.gender, c.comments FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id; WHERE `t.id` > ? ORDER BY `t.id` ASC (io.confluent.connect.jdbc.source.TimestampIncrementingTableQuerier)\n")])])]),a("p",[t._v("7.看一下该"),a("code",[t._v("prepared SQL query")]),t._v("部分，可能会发现：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("[…] FROM demo.transactions t LEFT OUTER JOIN demo.customers c on t.customer_id = c.id; WHERE `t.id` > ? ORDER BY `t.id` ASC\n")])])]),a("p",[t._v("8.注意在"),a("code",[t._v("JOIN")]),t._v("子句的"),a("code",[t._v("c.id")]),t._v("后面有语句终止符（;），后面有WHERE子句。该"),a("code",[t._v("WHERE")]),t._v("子句由Kafka Connect附加，用于实现所要求的"),a("code",[t._v("incrementing")]),t._v("模式，但创建了一个无效的SQL语句；")]),t._v(" "),a("p",[t._v("9.然后在GitHub中查找与看到的错误相关的问题，因为有时它实际上是一个已知的问题，例如这个问题；")]),t._v(" "),a("p",[t._v("10.如果连接器存在并且是"),a("code",[t._v("RUNNING")]),t._v("，并且Kafka Connect工作节点日志中也没有错误，还应该检查：")]),t._v(" "),a("ul",[a("li",[t._v("连接器的提取间隔是多少？也许它完全按照配置运行，并且源表中的数据已经更改，但就是没有拉取到新数据。要检查这一点，可以在Kafka Connect工作节点的输出中查找"),a("code",[t._v("JdbcSourceTaskConfig")]),t._v("的值和"),a("code",[t._v("poll.interval.ms")]),t._v("的值；")]),t._v(" "),a("li",[t._v("如果正在使用的是增量摄取，Kafka Connect关于偏移量是如何存储的？如果删除并重建相同名称的连接器，则将保留前一个实例的偏移量。考虑这样的场景，创建完连接器之后，成功地将所有数据提取到源表中的给定主键或时间戳值，然后删除并重新创建了它，新版本的连接器将获得之前版本的偏移量，因此仅提取比先前处理的数据更新的数据，具体可以通过查看保存在其中的"),a("code",[t._v("offset.storage.topic")]),t._v("值和相关表来验证这一点。")])]),t._v(" "),a("h2",{attrs:{id:"重置jdbc源连接器读取数据的点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重置jdbc源连接器读取数据的点"}},[t._v("#")]),t._v(" 重置JDBC源连接器读取数据的点")]),t._v(" "),a("p",[t._v("当Kafka Connect以分布式模式运行时，它会在Kafka主题（通过"),a("code",[t._v("offset.storage.topic")]),t._v("配置）中存储有关它在源系统中读取的位置（称为偏移量）的信息，当连接器任务重启时，它可以从之前的位置继续进行处理，具体可以在连接器工作节点日志中看到：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INFO Found offset {{protocol=1, table=demo.accounts}={timestamp_nanos=0, timestamp=1547030056000}, {table=accounts}=null} for partition {protocol=1, table=demo.accounts} (io.confluent.connect.jdbc.source.JdbcSourceTask)\n")])])]),a("p",[t._v("每次连接器轮询时，都会使用这个偏移量，它会使用预编译的SQL语句，并且使用Kafka Connect任务传递的值替换"),a("code",[t._v("?")]),t._v("占位符：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DEBUG TimestampIncrementingTableQuerier{table=\"demo\".\"accounts\", query='null', topicPrefix='mysql-08-', incrementingColumn='', timestampColumns=[UPDATE_TS]} prepared SQL query: SELECT * FROM `demo`.`accounts` WHERE `demo`.`accounts`.`UPDATE_TS` > ? AND `demo`.`accounts`.`UPDATE_TS` < ? ORDER BY `demo`.`accounts`.`UPDATE_TS` ASC (io.confluent.connect.jdbc.source.TimestampIncrementingTableQuerier)\nDEBUG Executing prepared statement with timestamp value = 2019-01-09 10:34:16.000 end time = 2019-01-09 13:23:40.000 (io.confluent.connect.jdbc.source.TimestampIncrementingCriteria)\n")])])]),a("p",[t._v("这里，第一个时间戳值就是存储的偏移量，第二个时间戳值是当前时间戳。")]),t._v(" "),a("p",[t._v("虽然没有文档记载，但可以手动更改连接器使用的偏移量，因为是在JDBC源连接器的上下文中，所以可以跨多个源连接器类型，这意味着更改时间戳或主键，连接器会将后续记录视为未处理的状态。")]),t._v(" "),a("p",[t._v("首先要做的是确保Kafka Connect已经刷新了周期性的偏移量，可以在工作节点日志中看到何时执行此操作：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INFO WorkerSourceTask{id=jdbc_source_mysql_08-0} Committing offsets (org.apache.kafka.connect.runtime.WorkerSourceTask)\n")])])]),a("p",[t._v("看下Kafka的主题，可以看到Kafka Connect创建的内部主题，并且负责偏移量的主题也是其中之一，名字可能有所不同：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ksql> LIST TOPICS;\n\n Kafka Topic            | Registered | Partitions | Partition Replicas | Consumers | ConsumerGroups\n----------------------------------------------------------------------------------------------------\n docker-connect-configs | false      | 1          | 1                  | 0         | 0\n docker-connect-offsets | false      | 1          | 1                  | 0         | 0\n docker-connect-status  | false      | 5          | 1                  | 0         | 0\n\nksql> PRINT \'docker-connect-offsets\' FROM BEGINNING;\nFormat:JSON\n{"ROWTIME":1547038346644,"ROWKEY":"[\\"jdbc_source_mysql_08\\",{\\"protocol\\":\\"1\\",\\"table\\":\\"demo.customers\\"}]","timestamp_nanos":0,"timestamp":1547030057000}\n')])])]),a("p",[t._v("当Kafka Connect任务启动时，它会读取此主题并使用适当主键的最新值。要更改偏移量，只需插入一个新值即可。最简单的方法是转存当前主题内容，修改内容并重新执行，因为一致性和简单，可以考虑使用"),a("a",{attrs:{href:"https://github.com/edenhill/kafkacat/",target:"_self",rel:"noopener noreferrer"}},[t._v("kafkacat")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("转存当前的内容：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kafkacat -b kafka:29092 -t docker-connect-offsets -C -K"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -o-1")]),t._v("\n% Reached end of topic docker-connect-offsets "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" at offset "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc_source_mysql_08"')]),t._v(","),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"protocol"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(","),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"table"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"demo.accounts"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#{"timestamp_nanos":0,"timestamp":1547030056000}')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果是多个连接器，可能复杂些，但是这里只有一个，所以使用了"),a("code",[t._v("-o-1")]),t._v("标志，它定义了返回的偏移量。")]),t._v(" "),a("ul",[a("li",[t._v("根据需要修改偏移量。在这里使用了"),a("code",[t._v("mode=timestamp")]),t._v("来监测表中的变化。时间戳值是"),a("code",[t._v("1547030056000")]),t._v("，使用相关的"),a("a",{attrs:{href:"https://www.epochconverter.com/",target:"_self",rel:"noopener noreferrer"}},[t._v("时间戳转换")]),t._v("之类的工具，可以很容易地转换和操作，比如将其提前一小时（"),a("code",[t._v("1547026456000")]),t._v("）。接下来，使用更新后的"),a("code",[t._v("timestamp")]),t._v("值准备新消息：")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('["jdbc_source_mysql_08",{"protocol":"1","table":"demo.accounts"}]#{"timestamp_nanos":0,"timestamp":1547026456000}\n')])])]),a("ul",[a("li",[t._v("将新消息发给主题：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["jdbc_source_mysql_08",{"protocol":"1","table":"demo.accounts"}]#{"timestamp_nanos":0,"timestamp":1547026456000}\'')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\nkafkacat -b kafka:29092 -t docker-connect-offsets -P -Z -K"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])]),a("ul",[a("li",[t._v("如果要从头开始重启连接器，可以发送"),a("code",[t._v("NULL")]),t._v("消息值：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[“jdbc_source_mysql_08”，{“protocol”：“1”，“table”：“demo.accounts”}]＃'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\nkafkacat -b kafka：29092 -t docker-connect-offsets -P -Z -K＃\n")])])]),a("ul",[a("li",[t._v("重启连接器任务：")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -i -X POST -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Accept:application/json"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n        -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type:application/json"')]),t._v(" http://localhost:8083/connectors/jdbc_source_mysql_08/tasks/0/restart\n")])])]),a("ul",[a("li",[t._v("也可以只重启Kafka Connect工作节点，重启之后，数据源中所有比新设置的偏移量更新的记录，都会被重新提取到Kafka主题中。")])]),t._v(" "),a("p",[a("strong",[t._v("从指定的时间戳或者主键处开启表的捕获")])]),t._v(" "),a("p",[t._v("当使用时间戳或自增主键模式创建JDBC源连接器时，它会从主键为"),a("code",[t._v("-1")]),t._v("和/或时间戳为"),a("code",[t._v("1970-01-01 00:00:00.00")]),t._v("开始，这意味着会获得表的全部内容，然后在后续的轮询中获取任何插入/更新的数据。")]),t._v(" "),a("p",[t._v("但是如果不想要表的完整副本，只是希望连接器从现在开始，该怎么办呢？这在目前的Kafka Connect中还不支持，但可以使用前述的方法。不需要获取现有的偏移量消息并对其进行定制，而是自己创建。消息的格式依赖于正在使用的连接器和表的名称，一种做法是先创建连接器，确定格式，然后删除连接器，另一种做法是使用具有相同源表名和结构的环境，除非在该环境中没有可供连接器提取的数据，否则同样也能得到所需的消息格式。")]),t._v(" "),a("p",[t._v("在创建连接器之前，使用适当的值配置偏移量主题。在这里，希望从"),a("code",[t._v("demo.transactions")]),t._v("表中提取自增主键大于42的所有行：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'["jdbc_source_mysql_20",{"protocol":"1","table":"demo.transactions"}]#{"incrementing":42}\'')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\nkafkacat -b kafka:29092 -t docker-connect-offsets -P -Z -K"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n")])])]),a("p",[t._v("下面创建连接器：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_20",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-20-",\n                "mode":"incrementing",\n                "table.whitelist" : "demo.transactions",\n                "incrementing.column.name": "txn_id",\n                "validate.non.null": false\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("在生成的Kafka Connect工作日志中，可以看到：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("INFO Found offset {{protocol=1, table=demo.transactions}={incrementing=42}, {table=transactions}=null} for partition {protocol=1, table=demo.transactions} (io.confluent.connect.jdbc.source.JdbcSourceTask)\n…\nDEBUG Executing prepared statement with incrementing value = 42 (io.confluent.connect.jdbc.source.TimestampIncrementingCriteria)\n")])])]),a("p",[t._v("和预期一样，Kafka主题中只注入了"),a("code",[t._v("txn_id")]),t._v("大于42的行：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ksql> PRINT \'mysql-20x-transactions\' FROM BEGINNING;\nFormat:AVRO\n1/9/19 1:44:07 PM UTC, null, {"txn_id": 43, "customer_id": 3, "amount": {"bytes": "ús"}, "currency": "CNY", "txn_timestamp": "2018-12-15T08:23:24Z"}\n1/9/19 1:44:07 PM UTC, null, {"txn_id": 44, "customer_id": 5, "amount": {"bytes": "\\f!"}, "currency": "CZK", "txn_timestamp": "2018-10-04T13:10:17Z"}\n1/9/19 1:44:07 PM UTC, null, {"txn_id": 45, "customer_id": 3, "amount": {"bytes": "çò"}, "currency": "USD", "txn_timestamp": "2018-04-03T03:40:49Z"}\n')])])]),a("h2",{attrs:{id:"配置kafka消息键"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置kafka消息键"}},[t._v("#")]),t._v(" 配置Kafka消息键")]),t._v(" "),a("p",[t._v("Kafka消息是键/值对，其中值是"),a("code",[t._v("有效内容")]),t._v("。在JDBC连接器的上下文中，值是要被提取的表行的内容。Kafka消息中的键对于分区和下游处理非常重要，其中任何关联（比如KSQL）都将在数据中完成。")]),t._v(" "),a("p",[t._v("JDBC连接器默认不设置消息键，但是使用Kafka Connect的"),a("a",{attrs:{href:"https://docs.confluent.io/current/connect/transforms/index.html?_ga=2.23365946.1426807846.1551933483-1401297420.1550931180",target:"_self",rel:"noopener noreferrer"}},[t._v("单消息转换")]),t._v("（SMT）机制可以轻松实现。假设想要提取"),a("code",[t._v("accounts")]),t._v("表并将其"),a("code",[t._v("ID")]),t._v("列用作消息键。只需简单地将其添加到下面的配置中即可：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_06",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-06-",\n                "poll.interval.ms" : 3600000,\n                "table.whitelist" : "demo.accounts",\n                "mode":"bulk",\n                "transforms":"createKey,extractInt",\n                "transforms.createKey.type":"org.apache.kafka.connect.transforms.ValueToKey",\n                "transforms.createKey.fields":"id",\n                "transforms.extractInt.type":"org.apache.kafka.connect.transforms.ExtractField'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Key")]),t._v('",\n                "transforms.extractInt.field":"id"\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("这时如果使用诸如"),a("code",[t._v("kafka-avro-console-consumer")]),t._v("之类的工具检查数据，就会看到键（JSON内容之前的最左列）与"),a("code",[t._v("id")]),t._v("值匹配：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('kafka-avro-console-consumer \\\n      --bootstrap-server kafka:29092 \\\n      --property schema.registry.url=http://schema-registry:8081 \\\n      --topic mysql-06-accounts --from-beginning --property print.key=true\n\n1       {"id":{"int":1},"first_name":{"string":"Hamel"},"last_name":{"string":"Bly"},"username":{"string":"Hamel Bly"},"company":{"string":"Erdman-Halvorson"},"created_date":{"int":17759}}\n2       {"id":{"int":2},"first_name":{"string":"Scottie"},"last_name":{"string":"Geerdts"},"username":{"string":"Scottie Geerdts"},"company":{"string":"Mante Group"},"created_date":{"int":17692}}\n')])])]),a("p",[t._v("如果要在数据中设置键以便与KSQL一起使用，则需要将其创建为字符串类型，因为KSQL目前不支持其它键类型，具体可以在连接器配置中添加如下内容：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"key.converter": "org.apache.kafka.connect.storage.StringConverter"\n')])])]),a("p",[t._v("然后就可以在KSQL中使用了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ksql> CREATE STREAM ACCOUNTS WITH (KAFKA_TOPIC='mysql-06X-accounts', VALUE_FORMAT='AVRO');\nksql> SELECT ROWKEY, ID, FIRST_NAME + ' ' + LAST_NAME FROM ACCOUNTS;\n1 | 1 | Hamel Bly\n2 | 2 | Scottie Geerdts\n3 | 3 | Giana Bryce\n")])])]),a("h2",{attrs:{id:"更改主题名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更改主题名称"}},[t._v("#")]),t._v(" 更改主题名称")]),t._v(" "),a("p",[t._v("JDBC连接器要求指定"),a("code",[t._v("topic.prefix")]),t._v("，但如果不想要，或者想将主题名更改为其它模式，SMT可以实现。")]),t._v(" "),a("p",[t._v("假设要删除"),a("code",[t._v("mysql-07-")]),t._v("前缀，那么需要一点"),a("a",{attrs:{href:"https://docs.confluent.io/current/connect/transforms/regexrouter.html?&_ga=2.232540063.1426807846.1551933483-1401297420.1550931180#regexrouter",target:"_self",rel:"noopener noreferrer"}},[t._v("正则表达式")]),t._v("的技巧：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_07",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-07-",\n                "poll.interval.ms" : 3600000,\n                "catalog.pattern" : "demo",\n                "table.whitelist" : "accounts",\n                "mode":"bulk",\n                "transforms":"dropTopicPrefix",\n                "transforms.dropTopicPrefix.type":"org.apache.kafka.connect.transforms.RegexRouter",\n                "transforms.dropTopicPrefix.regex":"mysql-07-(.*)",\n                "transforms.dropTopicPrefix.replacement":"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v("\"\n                }\n        }'")]),t._v("\n")])])]),a("p",[t._v("这样主题名就和表名一致了：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ksql> LIST TOPICS;\n\n Kafka Topic            | Registered | Partitions | Partition Replicas | Consumers | ConsumerGroups\n----------------------------------------------------------------------------------------------------\n accounts               | false      | 1          | 1                  | 0         | 0\n")])])]),a("h2",{attrs:{id:"bytes-decimals-numerics和自定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bytes-decimals-numerics和自定义类型"}},[t._v("#")]),t._v(" Bytes, Decimals, Numerics和自定义类型")]),t._v(" "),a("p",[t._v("这个话题比较深入。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("numeric.mapping")]),t._v(": "),a("code",[t._v("best_fit")]),t._v("如果源中包含"),a("code",[t._v("NUMERIC/NUMBER")]),t._v("类型的数据，则可能需要这个配置项；")]),t._v(" "),a("li",[t._v("如果需要，可以在JDBC连接器中使用"),a("code",[t._v("query")]),t._v("选项，用于对源表中的数据进行转换；")]),t._v(" "),a("li",[t._v("如果字段以JDBC"),a("code",[t._v("DECIMAL")]),t._v("类型暴露，则"),a("code",[t._v("numeric.mapping")]),t._v("无法处理：\n"),a("ul",[a("li",[t._v("MySQL将所有数值存储为"),a("code",[t._v("DECIMAL")]),t._v("；")]),t._v(" "),a("li",[t._v("SQL Server将"),a("code",[t._v("DECIMAL")]),t._v("和"),a("code",[t._v("NUMERIC")]),t._v("原生存储，因此必须将"),a("code",[t._v("DECIMAL")]),t._v("字段转换为"),a("code",[t._v("NUMERIC")]),t._v("；")])])]),t._v(" "),a("li",[t._v("在Oracle中，要在"),a("code",[t._v("NUMBER")]),t._v("字段中指定长度和标度，例如"),a("code",[t._v("NUMBER(5,0)")]),t._v("，不能是"),a("code",[t._v("NUMBER")]),t._v("；")]),t._v(" "),a("li",[a("code",[t._v("NUMERIC")]),t._v("和"),a("code",[t._v("DECIMAL")]),t._v("都被视为NUMBER，"),a("code",[t._v("INT")]),t._v("也是；")])]),t._v(" "),a("p",[t._v("完成之后，下面会做一个解释：")]),t._v(" "),a("p",[t._v("Kafka Connect是一个可以将数据注入Kafka、与特定源技术无关的框架。无论是来自SQL Server、DB2、MQTT、文本文件、REST还是Kafka Connect支持的任何其它数十种来源，它发送给Kafka的数据格式都为"),a("code",[t._v("Avro")]),t._v("或"),a("code",[t._v("JSON")]),t._v("，这通常是一个透明的过程，只是在处理数值数据类型时有些特别，比如"),a("code",[t._v("DECIMAL")]),t._v("，"),a("code",[t._v("NUMBER")]),t._v("等等，以下面的MySQL查询为例：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> SELECT * FROM transactions LIMIT 1;\n+--------+-------------+--------+----------+----------------------+\n| txn_id | customer_id | amount | currency | txn_timestamp        |\n+--------+-------------+--------+----------+----------------------+\n|      1 |           5 | -72.97 | RUB      | 2018-12-12T13:58:37Z |\n+--------+-------------+--------+----------+----------------------+\n")])])]),a("p",[t._v("挺正常是吧？其实，"),a("code",[t._v("amount")]),t._v("列是"),a("code",[t._v("DECIMAL(5,2)")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("mysql> describe transactions;\n+---------------+--------------+------+-----+---------+-------+\n| Field         | Type         | Null | Key | Default | Extra |\n+---------------+--------------+------+-----+---------+-------+\n| txn_id        | int(11)      | YES  |     | NULL    |       |\n| customer_id   | int(11)      | YES  |     | NULL    |       |\n| amount        | decimal(5,2) | YES  |     | NULL    |       |\n| currency      | varchar(50)  | YES  |     | NULL    |       |\n| txn_timestamp | varchar(50)  | YES  |     | NULL    |       |\n+---------------+--------------+------+-----+---------+-------+\n5 rows in set (0.00 sec)\n")])])]),a("p",[t._v("但是当使用JDBC连接器的默认设置提取到Kafka中时，最终会是这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ksql> PRINT \'mysql-02-transactions\' FROM BEGINNING;\nFormat:AVRO\n1/4/19 5:38:45 PM UTC, null, {"txn_id": 1, "customer_id": 5, "amount": {"bytes": "ã\\u007F"}, "currency": "RUB", "txn_timestamp": "2018-12-12T13:58:37Z"}\n')])])]),a("p",[a("code",[t._v("DECIMAL")]),t._v("变成了一个看似乱码的"),a("code",[t._v("bytes")]),t._v("值，连接器默认会使用自己的"),a("code",[t._v("DECIMAL")]),t._v("逻辑类型，该类型在Avro中被序列化为字节，可以通过查看Confluent模式注册表中的相关条目来看到这一点：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8081/subjects/mysql-02-transactions-value/versions/1"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jq "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.schema|fromjson.fields[] | select (.name == \"amount\")'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"null"')]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bytes"')]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scale"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"precision"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("64")]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connect.version"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connect.parameters"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"scale"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connect.name"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.apache.kafka.connect.data.Decimal"')]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"logicalType"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"decimal"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(",\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"default"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" null\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当连接器使用"),a("code",[t._v("AvroConverter")]),t._v("消费时，这会正常处理并保存为"),a("code",[t._v("DECIMAL")]),t._v("（并且在Java中也可以反序列化为"),a("code",[t._v("BigDecimal")]),t._v("），但对于反序列化Avro的其它消费者，它们只会得到字节。在使用启用了模式的JSON时，也会看到这一点，"),a("code",[t._v("amount")]),t._v("值会是Base64编码的字节字符串：")]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"schema"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"struct"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"fields"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"type"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bytes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"optional"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"org.apache.kafka.connect.data.Decimal"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"version"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"parameters"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scale"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"field"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"amount"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"payload"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"txn_id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"customer_id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"amount"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Cv8="')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("因此，不管使用的是JSON还是Avro，这都是"),a("a",{attrs:{href:"https://docs.confluent.io/5.1.0/connect/kafka-connect-jdbc/source-connector/source_config_options.html?_ga=2.224776090.1426807846.1551933483-1401297420.1550931180#database",target:"_self",rel:"noopener noreferrer"}},[t._v("numeric.mapping")]),t._v("配置项的来源。它默认设置为"),a("code",[t._v("none")]),t._v("（即使用连接器的"),a("code",[t._v("DECIMAL")]),t._v("类型），但通常希望连接器将类型实际转换为更兼容的类型，以适合数字的精度，更具体的说明，可以参见相关的"),a("a",{attrs:{href:"https://docs.confluent.io/current/connect/kafka-connect-jdbc/source-connector/index.html?_ga=2.27699900.1426807846.1551933483-1401297420.1550931180#mapping-column-types",target:"_self",rel:"noopener noreferrer"}},[t._v("文档")]),t._v("。")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/confluentinc/kafka-connect-jdbc/issues/563",target:"_self",rel:"noopener noreferrer"}},[t._v("此选项目前不支持"),a("code",[t._v("DECIMAL")]),t._v("类型")]),t._v("，因此这里是在Postgres中具有"),a("code",[t._v("NUMERIC")]),t._v("类型的相同原理的示例：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n              "name": "jdbc_source_postgres_12",\n              "config": {\n                      "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                      "connection.url": "jdbc:postgresql://postgres:5432/postgres",\n                      "connection.user": "connect_user",\n                      "connection.password": "asgard",\n                      "topic.prefix": "postgres-12-",\n                      "numeric.mapping": "best_fit",\n                      "table.whitelist" : "demo.transactions",\n                      "mode":"bulk",\n                      "poll.interval.ms" : 3600000\n                      }\n              }\'')]),t._v("\n")])])]),a("p",[t._v("结果如下所示：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('ksql> PRINT \'postgres-12-transactions\' FROM BEGINNING;\nFormat:AVRO\n1/7/19 6:27:16 PM UTC, null, {"txn_id": 1, "customer_id": 5, "amount": -72.97, "currency": "RUB", "txn_timestamp": "2018-12-12T13:58:37Z"}\n')])])]),a("p",[t._v("可以在"),a("a",{attrs:{href:"https://gist.github.com/confluentgist/f58107f44741943a21c7a821c89bbf21",target:"_self",rel:"noopener noreferrer"}},[t._v("这里")]),t._v("看到有关此内容的更多详细信息，以及Postgres、Oracle和MS SQL Server中的示例。")]),t._v(" "),a("h2",{attrs:{id:"处理多个表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理多个表"}},[t._v("#")]),t._v(" 处理多个表")]),t._v(" "),a("p",[t._v("如果需要从多个表中提取数据，则可以通过并行处理来减少总提取时间，这在Kafka的JDBC连接器有两种方法：")]),t._v(" "),a("ol",[a("li",[t._v("定义多个连接器，每个连接器都处理单独的表；")]),t._v(" "),a("li",[t._v("定义单个连接器，但增加任务数。每个Kafka Connect的工作由一个或多个"),a("a",{attrs:{href:"https://docs.confluent.io/current/connect/concepts.html?_ga=2.70626960.1426807846.1551933483-1401297420.1550931180#connect-tasks",target:"_self",rel:"noopener noreferrer"}},[t._v("任务")]),t._v("来执行，每个连接器默认只有一个任务，这意味着从数据库中提取数据是单进程处理的。")])]),t._v(" "),a("p",[t._v("前者具有更高的管理开销，但确实提供了每个表自定义设置的灵活性。如果可以使用相同的连接器配置提取所有表，则增加单个连接器中的任务数是一种好方法。")]),t._v(" "),a("p",[t._v("当增加从数据库中提取数据的并发性时，要从整体上考虑。因为运行一百个并发任务虽然可能会更快，但数百个与数据库的连接可能会对数据库产生负面影响。")]),t._v(" "),a("p",[t._v("以下是同一连接器的两个示例。两者都将从数据库中提取所有表，总共6个。在第一个连接器中，未指定最大任务数，因此为默认值1。在第二个中，指定了最多运行三个任务（"),a("code",[t._v('"tasks.max":3')]),t._v("）：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_01",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-01-",\n                "mode":"bulk"\n                }\n        }\'')]),t._v("\n\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -X POST http://localhost:8083/connectors -H "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Content-Type: application/json"')]),t._v(" -d "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n        "name": "jdbc_source_mysql_11",\n        "config": {\n                "connector.class": "io.confluent.connect.jdbc.JdbcSourceConnector",\n                "connection.url": "jdbc:mysql://mysql:3306/demo",\n                "connection.user": "connect_user",\n                "connection.password": "asgard",\n                "topic.prefix": "mysql-11-",\n                "mode":"bulk",\n                "tasks.max":3\n                }\n        }\'')]),t._v("\n")])])]),a("p",[t._v("当查询连接器的"),a("a",{attrs:{href:"https://docs.confluent.io/current/connect/references/restapi.html?_ga=2.262439820.1426807846.1551933483-1401297420.1550931180",target:"_self",rel:"noopener noreferrer"}},[t._v("Kafka ConnectREST")]),t._v("API时，可以看到每个连接器正在运行的任务数以及它们已分配的表。第一个连接器有一个任务负责所有6张表：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://localhost:8083/connectors/jdbc_source_mysql_01/tasks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("jq "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"connector"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc_source_mysql_01"')]),t._v(",\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"task"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(",\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"config"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tables"')]),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("NUM_TEST"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(","),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("accounts"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(","),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("customers"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(","),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("transactions"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(","),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("firewall"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(","),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("."),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("log_events"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v('"')]),t._v(",\n      …\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("第二个连接器有3个任务，每个任务分配2张表：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" -s“http：// localhost：8083 / connectors / jdbc_source_mysql_11 / tasks”"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" jq"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'。'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    “ID”： "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      “connector”：“jdbc_source_mysql_11”，“任务”：0\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n    “config”："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      “tables”：“"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" .NUM_TEST"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("，"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v(" .accounts"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("”，\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    “ID”： "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      “connector”：“jdbc_source_mysql_11”，“任务”：1\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n    “config”："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      “tables”：“"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("customers"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("，"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" .transactions"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("”，\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    “ID”： "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      “connector”：“jdbc_source_mysql_11”，“任务”：2\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("，\n    “config”："),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      “tables”：“"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("security`"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("firewall"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("，"),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("security"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("log_events"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("”，\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("RightPane")],1)}),[],!1,null,null,null);s.default=e.exports}}]);