(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{215:function(t,e,a){"use strict";a.r(e);var n=a(3),v=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ignite2-8版本发布-减轻生产压力和提高机器学习能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ignite2-8版本发布-减轻生产压力和提高机器学习能力"}},[t._v("#")]),t._v(" Ignite2.8版本发布：减轻生产压力和提高机器学习能力")]),t._v(" "),a("p",[t._v("Apache Ignite 2.8做出了数千项变更，这些变更几乎增强了平台的所有组件，但本文不会面面俱到，主要是指导Ignite开发人员关注核心的增强功能，详细的"),a("a",{attrs:{href:"https://www.oschina.net/news/113820/apache-ignite-2-8-0-released",target:"_self",rel:"noopener noreferrer"}},[t._v("更新列表")]),t._v("请看这里。")]),t._v(" "),a("h2",{attrs:{id:"新的产品监控和跟踪子系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新的产品监控和跟踪子系统"}},[t._v("#")]),t._v(" 新的产品监控和跟踪子系统")]),t._v(" "),a("p",[t._v("很多Ignite开发者将Ignite部署于核心应用系统，并希望Ignite可以与许多外部监控工具集成并易于扩展，基于此，Ignite团队花费了几个月的时间，开发了一个强大而灵活的监视和分析子系统，用于生产监控和诊断（也称为分析）。")]),t._v(" "),a("p",[t._v("新的子系统由多个与特定的Ignite组件相关的单独分组的指标注册表组成，例如可以找到和缓存、计算或服务网格API相关的注册表。由于注册表是通用的，因此可以通过大量支持各种协议的工具来观察Ignite的状态。Ignite 2.8为监控接口默认也提供了若干个出口，比如日志文件、JMX和SQL视图之类，同时也支持诸如OpenCensus之类的现代工具。")]),t._v(" "),a("p",[t._v("目前，此新子系统以实验性模式发布，只是给Ignite开发者一些时间来验证新API并提出改进建议。")]),t._v(" "),a("h2",{attrs:{id:"机器学习能力提高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#机器学习能力提高"}},[t._v("#")]),t._v(" 机器学习能力提高")]),t._v(" "),a("p",[t._v("Ignite 2.8的机器学习（ML）功能与以前的版本有很大的不同，目前已经稳定，开发者可以放心使用了。")]),t._v(" "),a("p",[t._v("模型训练通常是一个多步骤的过程，包括预处理、训练和评估/验证阶段。新的流水线API通过将所有阶段组合成单一的工作流来简化这个过程。")]),t._v(" "),a("p",[t._v("除了流水线API，Ignite 2.8引入了集成方法，该方法可以将多种机器学习技术组合到一个预测模型中，以减少方差（装袋）和偏差（增强），或改善预测（堆叠）。")]),t._v(" "),a("p",[t._v("此外，现在还可以将Apache Spark或XGBoost模型导入Ignite进行进一步的推断，导向其他任务。以后可以随时使用喜欢的框架来训练模型，并在模型需要在生产中部署并大规模执行时将其转换为Ignite表示。")]),t._v(" "),a("h2",{attrs:{id:"超越java-分区感知和其他改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#超越java-分区感知和其他改进"}},[t._v("#")]),t._v(" 超越Java：分区感知和其他改进")]),t._v(" "),a("p",[t._v("虽然Ignite是一个Java中间件，但是也可以用作跨平台的数据库和计算平台，用于以C＃、C++、Python和其他编程语言开发的应用。")]),t._v(" "),a("p",[t._v("瘦客户端协议是其他编程语言支持的真正核心能力，并且在Ignite 2.8中通过支持分区感知获得了显著的性能优化。其允许瘦客户端将查询请求直接发送到持有该数据的节点。在没有分区感知时，应用是通过瘦客户端接入集群中的单个服务端节点来执行所有查询和操作，该服务端节点实际承担了代理的职能。")]),t._v(" "),a("h2",{attrs:{id:"减轻生产压力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减轻生产压力"}},[t._v("#")]),t._v(" 减轻生产压力")]),t._v(" "),a("p",[t._v("本节列出的内容可能没有醒目的标题，但是这些改进大幅优化了生产中的自动化，以及避免了出现数据不一致的情况。")]),t._v(" "),a("p",[t._v("Java垃圾回收器触发的停顿会影响Java应用的性能、响应能力和吞吐量。Ignite有一个分区映射交换（PME）进程，和Java垃圾回收类似，该进程的某些阶段为了集群范围内的一致性会阻塞所有正在运行的操作。对于大多数Ignite使用场景，这些阶段会迅速完成，并且不会影响性能，但是对于某些低延迟或高吞吐量的场景，可以检测到可能会暂时影响某些业务运行的性能下降。在Ignite 2.8中做了很大的改进，即如果当前基线拓扑范围内的节点离开集群或胖客户端接入集群，则不会再发生PME阻塞。")]),t._v(" "),a("p",[t._v("还有，故障总是会发生，所以系统如何处理故障非常重要。在Ignite 2.8中重新审视了集群在重启时处理故障恢复的方式。此外还添加了读取修复功能，以动态管理集群的主备副本之间的数据不一致。")]),t._v(" "),a("p",[t._v("另外值得一提的是，Ignite 2.8通过支持持久化数据文件和预写日志的压缩，改进了磁盘空间占用。通过减少压缩算法所需的CPU周期，可以节省很多存储空间。")]),t._v(" "),a("p",[t._v("最后但并非不重要的一点是，新版本支持基线的自动调整，该功能在无需干预的情况下，可以为打开Ignite原生持久化的集群自动调整拓扑。")])])}),[],!1,null,null,null);e.default=v.exports}}]);